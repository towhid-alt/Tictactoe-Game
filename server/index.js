//importing modules
const express = require("express");
const http = require("http");
const mongoose = require("mongoose");
require('dotenv').config();



const app = express();
var server = http.createServer(app);
const Room = require('./models/room')

var io = require("socket.io")
var io = socketio(server);
//var io = require("socket.io") (server);

//client -> middleware -> server
//middleware
app.use(express.json()); //it will convert all the incoming data to json format
var io = require("socket.io")(server);

//middle ware
app.use(express.json());

const DB = process.env.DB;

io.onconnection('connection', (socket) => {
    console.log('connected!');
    socket.on("createRoom", async ({ nickname }) => {
        console.log(nickname);
        try{
                   let room = new Room();//creating instance of the Room class
        let player = {
            socketID: socket.id,
            nickname: nickname,
            playerType: 'X',
        };
        //player is stored in the room-->

        room.players.push(player);
        room.turn = player;

        //Now saving the data in mongoDB
        room = await room.save();//after saving we get a new 
        //so we save that in the room variable itself

        console.log(room);
        const roomId = room._id.toString();//this ID is auto-generated by mongoDB
        socket.join(roomId);//so that socket joins the current room game is going on, in

        //tell our client that room has been created
        //go to the next page

        //io -> send data to everyone
        //socket -> sending data to yourself
        io.to(roomId).emit('createRoomSuccess', room);

        } catch (e) {
            console.log('Error-->',e);
        }
 
        //player is taken to the next screen
    })
});

mongoose.connect(DB).then(() => {
    console.log("Connection successful");
}).catch((e) => {
    console.log("MongoDB connection error:", e);
});

const port = process.env.PORT || 3000;
server.listen(port, '0.0.0.0', () => {
    console.log(`Server started and running on port ${port}`);
});

